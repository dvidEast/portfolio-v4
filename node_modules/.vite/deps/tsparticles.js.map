{
  "version": 3,
  "sources": ["../../../../node_modules/tsparticles-plugin-absorbers/esm/Options/Classes/AbsorberSizeLimit.js", "../../../../node_modules/tsparticles-plugin-absorbers/esm/Options/Classes/AbsorberSize.js", "../../../../node_modules/tsparticles-plugin-absorbers/esm/Options/Classes/Absorber.js", "../../../../node_modules/tsparticles-plugin-absorbers/esm/AbsorberInstance.js", "../../../../node_modules/tsparticles-plugin-absorbers/esm/Absorbers.js", "../../../../node_modules/tsparticles-plugin-absorbers/esm/index.js", "../../../../node_modules/tsparticles-updater-destroy/esm/Options/Classes/DestroyBounds.js", "../../../../node_modules/tsparticles-updater-destroy/esm/Options/Classes/SplitFactor.js", "../../../../node_modules/tsparticles-updater-destroy/esm/Options/Classes/SplitRate.js", "../../../../node_modules/tsparticles-updater-destroy/esm/Options/Classes/Split.js", "../../../../node_modules/tsparticles-updater-destroy/esm/Options/Classes/Destroy.js", "../../../../node_modules/tsparticles-updater-destroy/esm/Utils.js", "../../../../node_modules/tsparticles-updater-destroy/esm/DestroyUpdater.js", "../../../../node_modules/tsparticles-updater-destroy/esm/index.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Shapes/Circle/CircleShape.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Options/Classes/EmitterLife.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Options/Classes/EmitterRate.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Options/Classes/EmitterSize.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Options/Classes/Emitter.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Emitters.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/ShapeManager.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/Shapes/Square/SquareShape.js", "../../../../node_modules/tsparticles-plugin-emitters/esm/index.js", "../../../../node_modules/tsparticles-interaction-external-trail/esm/Options/Classes/Trail.js", "../../../../node_modules/tsparticles-interaction-external-trail/esm/TrailMaker.js", "../../../../node_modules/tsparticles-interaction-external-trail/esm/index.js", "../../../../node_modules/tsparticles-updater-roll/esm/Utils.js", "../../../../node_modules/tsparticles-updater-roll/esm/Options/Classes/RollLight.js", "../../../../node_modules/tsparticles-updater-roll/esm/Options/Classes/Roll.js", "../../../../node_modules/tsparticles-updater-roll/esm/RollUpdater.js", "../../../../node_modules/tsparticles-updater-roll/esm/index.js", "../../../../node_modules/tsparticles-updater-tilt/esm/Options/Classes/TiltAnimation.js", "../../../../node_modules/tsparticles-updater-tilt/esm/Options/Classes/Tilt.js", "../../../../node_modules/tsparticles-updater-tilt/esm/Utils.js", "../../../../node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js", "../../../../node_modules/tsparticles-updater-tilt/esm/index.js", "../../../../node_modules/tsparticles-updater-twinkle/esm/Options/Classes/TwinkleValues.js", "../../../../node_modules/tsparticles-updater-twinkle/esm/Options/Classes/Twinkle.js", "../../../../node_modules/tsparticles-updater-twinkle/esm/TwinkleUpdater.js", "../../../../node_modules/tsparticles-updater-twinkle/esm/index.js", "../../../../node_modules/tsparticles-updater-wobble/esm/Options/Classes/WobbleSpeed.js", "../../../../node_modules/tsparticles-updater-wobble/esm/Options/Classes/Wobble.js", "../../../../node_modules/tsparticles-updater-wobble/esm/Utils.js", "../../../../node_modules/tsparticles-updater-wobble/esm/WobbleUpdater.js", "../../../../node_modules/tsparticles-updater-wobble/esm/index.js", "../../../../node_modules/tsparticles/esm/index.js"],
  "sourcesContent": ["export class AbsorberSizeLimit {\n    constructor() {\n        this.radius = 0;\n        this.mass = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mass !== undefined) {\n            this.mass = data.mass;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ValueWithRandom, isNumber } from \"tsparticles-engine\";\nimport { AbsorberSizeLimit } from \"./AbsorberSizeLimit\";\nexport class AbsorberSize extends ValueWithRandom {\n    constructor() {\n        super();\n        this.density = 5;\n        this.value = 50;\n        this.limit = new AbsorberSizeLimit();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.density !== undefined) {\n            this.density = data.density;\n        }\n        if (isNumber(data.limit)) {\n            this.limit.radius = data.limit;\n        }\n        else {\n            this.limit.load(data.limit);\n        }\n    }\n}\n", "import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nimport { AbsorberSize } from \"./AbsorberSize\";\nexport class Absorber {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#000000\";\n        this.draggable = false;\n        this.opacity = 1;\n        this.destroy = true;\n        this.orbits = false;\n        this.size = new AbsorberSize();\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.draggable !== undefined) {\n            this.draggable = data.draggable;\n        }\n        this.name = data.name;\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.size !== undefined) {\n            this.size.load(data.size);\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n        if (data.orbits !== undefined) {\n            this.orbits = data.orbits;\n        }\n    }\n}\n", "import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.create(0, 0);\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height);\n                    particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? 0) * container.retina.pixelRatio) / 100) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n", "import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"tsparticles-engine\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n    addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        executeOnSingleOrMultiple(this.absorbers, (absorber) => {\n            this.addAbsorber(absorber);\n        });\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nclass AbsorbersPlugin {\n    constructor() {\n        this.id = \"absorbers\";\n    }\n    getPlugin(container) {\n        return new Absorbers(container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\nexport async function loadAbsorbersPlugin(engine, refresh = true) {\n    await engine.addPlugin(new AbsorbersPlugin(), refresh);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n", "import { OptionsColor, deepExtend, executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { SplitFactor } from \"./SplitFactor\";\nimport { SplitRate } from \"./SplitRate\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n", "import { DestroyBounds } from \"./DestroyBounds\";\nimport { Split } from \"./Split\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = \"none\";\n        this.split = new Split();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n", "import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getValue(splitOptions.factor), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? 0),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? 0),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? 0),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < 0.5) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? 0) + 1;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, 500);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n", "import { getRangeValue, } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nimport { split } from \"./Utils\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.engine = engine;\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / 100;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / 100;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / 100;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / 100;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n", "import { DestroyUpdater } from \"./DestroyUpdater\";\nexport async function loadDestroyUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"destroy\", (container) => new DestroyUpdater(engine, container), refresh);\n}\n", "import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = getRandom() / 4.0, theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u)), v = getRandom();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2), [a, b] = [size.width / 2, size.height / 2], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n", "export class EmitterSize {\n    constructor() {\n        this.mode = \"percent\";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, setRangeValue, } from \"tsparticles-engine\";\nimport { EmitterLife } from \"./EmitterLife\";\nimport { EmitterRate } from \"./EmitterRate\";\nimport { EmitterSize } from \"./EmitterSize\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = \"square\";\n        this.startCount = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        if (data.shape !== undefined) {\n            this.shape = data.shape;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n", "import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n", "import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n            this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n", "const shapes = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShape(name, drawer) {\n        if (!this.getShape(name)) {\n            shapes.set(name, drawer);\n        }\n    }\n    getShape(name) {\n        return shapes.get(name);\n    }\n    getSupportedShapes() {\n        return shapes.keys();\n    }\n}\n", "import { getRandom } from \"tsparticles-engine\";\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - 0.5);\n}\nexport class SquareShape {\n    randomPosition(position, size, fill) {\n        if (fill) {\n            return {\n                x: randomSquareCoordinate(position.x, size.width),\n                y: randomSquareCoordinate(position.y, size.height),\n            };\n        }\n        else {\n            const halfW = size.width / 2, halfH = size.height / 2, side = Math.floor(getRandom() * 4), v = (getRandom() - 0.5) * 2;\n            switch (side) {\n                case 0:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y - halfH,\n                    };\n                case 1:\n                    return {\n                        x: position.x - halfW,\n                        y: position.y + v * halfH,\n                    };\n                case 2:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y + halfH,\n                    };\n                case 3:\n                default:\n                    return {\n                        x: position.x + halfW,\n                        y: position.y + v * halfH,\n                    };\n            }\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            engine.emitterShapeManager?.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n", "import { deepExtend } from \"tsparticles-engine\";\nexport class Trail {\n    constructor() {\n        this.delay = 1;\n        this.pauseOnStop = false;\n        this.quantity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = data.quantity;\n        }\n        if (data.particles !== undefined) {\n            this.particles = deepExtend({}, data.particles);\n        }\n        if (data.pauseOnStop !== undefined) {\n            this.pauseOnStop = data.pauseOnStop;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Trail } from \"./Options/Classes/Trail\";\nexport class TrailMaker extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._delay = 0;\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(delta) {\n        const container = this.container, { interactivity } = container;\n        if (!container.retina.reduceFactor) {\n            return;\n        }\n        const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n        if (!trailOptions) {\n            return;\n        }\n        const optDelay = (trailOptions.delay * 1000) / this.container.retina.reduceFactor;\n        if (this._delay < optDelay) {\n            this._delay += delta.value;\n        }\n        if (this._delay < optDelay) {\n            return;\n        }\n        const canEmit = !(trailOptions.pauseOnStop &&\n            (interactivity.mouse.position === this._lastPosition ||\n                (interactivity.mouse.position?.x === this._lastPosition?.x &&\n                    interactivity.mouse.position?.y === this._lastPosition?.y)));\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos) {\n            this._lastPosition = { ...mousePos };\n        }\n        else {\n            delete this._lastPosition;\n        }\n        if (canEmit) {\n            container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n        }\n        this._delay -= optDelay;\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        return ((mouse.clicking && mouse.inside && !!mouse.position && isInArray(\"trail\", events.onClick.mode)) ||\n            (mouse.inside && !!mouse.position && isInArray(\"trail\", events.onHover.mode)));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.trail) {\n            options.trail = new Trail();\n        }\n        for (const source of sources) {\n            options.trail.load(source?.trail);\n        }\n    }\n    reset() {\n    }\n}\n", "import { TrailMaker } from \"./TrailMaker\";\nexport async function loadExternalTrailInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalTrail\", (container) => new TrailMaker(container), refresh);\n}\nexport * from \"./Options/Classes/Trail\";\nexport * from \"./Options/Interfaces/ITrail\";\n", "import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = 2 * Math.PI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nimport { RollLight } from \"./RollLight\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = \"vertical\";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n", "import { initParticle, updateRoll } from \"./Utils\";\nimport { Roll } from \"./Options/Classes/Roll\";\nexport class RollUpdater {\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n", "import { RollUpdater } from \"./RollUpdater\";\nexport async function loadRollUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"roll\", () => new RollUpdater(), refresh);\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nimport { TiltAnimation } from \"./TiltAnimation\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = \"clockwise\";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "export function updateTilt(particle, delta) {\n    if (!particle.tilt || !particle.options.tilt) {\n        return;\n    }\n    const tilt = particle.options.tilt, tiltAnimation = tilt.animation, speed = (particle.tilt.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = particle.tilt.decay ?? 1;\n    if (!tiltAnimation.enable) {\n        return;\n    }\n    switch (particle.tilt.status) {\n        case \"increasing\":\n            particle.tilt.value += speed;\n            if (particle.tilt.value > max) {\n                particle.tilt.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            particle.tilt.value -= speed;\n            if (particle.tilt.value < 0) {\n                particle.tilt.value += max;\n            }\n            break;\n    }\n    if (particle.tilt.velocity && decay !== 1) {\n        particle.tilt.velocity *= decay;\n    }\n}\n", "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n", "import { TiltUpdater } from \"./TiltUpdater\";\nexport async function loadTiltUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"tilt\", (container) => new TiltUpdater(container), refresh);\n}\n", "import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n", "import { TwinkleValues } from \"./TwinkleValues\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n", "import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    update() {\n    }\n}\n", "import { TwinkleUpdater } from \"./TwinkleUpdater\";\nexport async function loadTwinkleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"twinkle\", () => new TwinkleUpdater(), refresh);\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n", "import { isNumber, setRangeValue, } from \"tsparticles-engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n", "export function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n", "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue(wobbleOpt?.distance ?? 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n", "import { WobbleUpdater } from \"./WobbleUpdater\";\nexport async function loadWobbleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"wobble\", (container) => new WobbleUpdater(container), refresh);\n}\n", "import { loadAbsorbersPlugin } from \"tsparticles-plugin-absorbers\";\nimport { loadDestroyUpdater } from \"tsparticles-updater-destroy\";\nimport { loadEmittersPlugin } from \"tsparticles-plugin-emitters\";\nimport { loadExternalTrailInteraction } from \"tsparticles-interaction-external-trail\";\nimport { loadRollUpdater } from \"tsparticles-updater-roll\";\nimport { loadSlim } from \"tsparticles-slim\";\nimport { loadTiltUpdater } from \"tsparticles-updater-tilt\";\nimport { loadTwinkleUpdater } from \"tsparticles-updater-twinkle\";\nimport { loadWobbleUpdater } from \"tsparticles-updater-wobble\";\nexport async function loadFull(engine, refresh = true) {\n    await loadDestroyUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadTwinkleUpdater(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadExternalTrailInteraction(engine, false);\n    await loadAbsorbersPlugin(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadSlim(engine, refresh);\n}\n"],
  "mappings": "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",
  "names": ["container", "_a", "_b", "position", "particlesOptions", "container"]
}
